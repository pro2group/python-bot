import telebot
from telebot import types
import requests
import json
import sqlite3
from config import BOT_TOKEN

bot = telebot.TeleBot(BOT_TOKEN)

def get_random_meal():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –±–ª—é–¥–∞ —á–µ—Ä–µ–∑ API —Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤–∏–¥–µ–æ"""
    try:
        response = requests.get('https://www.themealdb.com/api/json/v1/1/random.php', timeout=2)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
        data = response.json()
        
        if not data.get('meals') or not data['meals'][0]:
            return None
            
        meal = data['meals'][0]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (—Å –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏)
        ingredients = []
        for i in range(1, 21):
            ingredient = meal.get(f"strIngredient{i}")
            measure = meal.get(f"strMeasure{i}")
            if ingredient and ingredient.strip():
                ingr_text = f"{measure.strip()} {ingredient.strip()}" if measure and measure.strip() else ingredient.strip()
                ingredients.append(ingr_text)
        
        return {
            'name': meal.get('strMeal'),
            'youtube': meal.get('strYoutube') or "–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
            'thumb': meal.get('strMealThumb'),
            'ingredients': ingredients
        }
    except (requests.RequestException, json.JSONDecodeError, KeyError) as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª—é–¥–∞: {e}")
        return None

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('meals.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS favorite_meals
                 (user_id INTEGER, meal_name TEXT, youtube_link TEXT)''')
    conn.commit()
    conn.close()

def add_to_favorites(user_id, meal_name, youtube_link):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    conn = sqlite3.connect('meals.db')
    c = conn.cursor()
    c.execute('INSERT INTO favorite_meals (user_id, meal_name, youtube_link) VALUES (?, ?, ?)',
              (user_id, meal_name, youtube_link))
    conn.commit()
    conn.close()

def get_random_favorite(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –±–ª—é–¥–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    conn = sqlite3.connect('meals.db')
    c = conn.cursor()
    c.execute('SELECT meal_name, youtube_link FROM favorite_meals WHERE user_id = ? ORDER BY RANDOM() LIMIT 1',
              (user_id,))
    result = c.fetchone()
    conn.close()
    return result

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ')
    btn2 = types.KeyboardButton('‚≠ê –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ')
    markup.add(btn1, btn2)
    
    bot.send_message(message.chat.id, 
                     "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç—ã –±–ª—é–¥!\n"
                     "–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:", 
                     reply_markup=markup)

@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.text == 'üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_message = bot.send_message(message.chat.id, "üîÑ –ò—â—É —Å–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ...")
        
        meal = get_random_meal()
        if meal is None:
            bot.edit_message_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –±–ª—é–¥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!", 
                                message.chat.id, 
                                loading_message.message_id)
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É:
        markup = types.InlineKeyboardMarkup()
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        add_to_fav = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ‚≠ê', 
                                               callback_data=f"add_{meal['name']}_{meal['youtube']}")
        markup.add(add_to_fav)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —Å Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        ingredients_text = "\n".join(f"`‚Ä¢ {ingr}`" for ingr in meal['ingredients'])
        # –¢–µ–ø–µ—Ä—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Ç–µ–∫—Å—Ç–µ, –∏ –∏—Ö –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
        
        response = (f"üç≥ –ë–ª—é–¥–æ: {meal['name']}\n"
                    f"üì∫ –í–∏–¥–µ–æ —Ä–µ—Ü–µ–ø—Ç: {meal['youtube']}\n\n"
                    "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n" + ingredients_text)
                    
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        bot.delete_message(message.chat.id, loading_message.message_id)
        bot.send_photo(message.chat.id, meal['thumb'], caption=response, reply_markup=markup, parse_mode="Markdown")
        
    elif message.text == '‚≠ê –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ':
        favorite = get_random_favorite(message.chat.id)
        if favorite:
            response = f"üç≥ –ë–ª—é–¥–æ: {favorite[0]}\nüì∫ –í–∏–¥–µ–æ —Ä–µ—Ü–µ–ø—Ç: {favorite[1]}"
            bot.send_message(message.chat.id, response)
        else:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –±–ª—é–¥!")

@bot.callback_query_handler(func=lambda call: call.data.startswith('add_'))
def callback_add_favorite(call):
    _, meal_name, youtube_link = call.data.split('_', 2)
    add_to_favorites(call.message.chat.id, meal_name, youtube_link)
    bot.answer_callback_query(call.id, "–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ! ‚≠ê")

if __name__ == '__main__':
    init_db()
    bot.polling(none_stop=True) 